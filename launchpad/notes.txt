# Aeolus remote control v2
Add an OSC interface to Aeolus itself, write one or many UI frontend e.g. like Control as previously described here (complete?) or a Launchpad MIDI interface, etc.

Aeolus uses a message passing mechanism for all model and interface updates, so this should be pretty straightforward.

The OSC interface will listen for OSC messages on the configured port and respond:
- register(host, port) send interface updates here
- deregister(host, port) stop sending interface udpates here
- handle control messages: forward them to the model, and the model responds by sending interface update messages, which we forward to registered observers

Aeolus maps "interface group" as an additional layer of indirection around "division" and "keyboard" for what reason I'm not sure but that's how it indexes things.

Control Events (To Aeolus)
/aeolus/control/knob/push ii group, knob
/aeolus/control/knob/pull ii group, knob
/aeolus/control/preset/store ii bank, preset
/aeolus/control/preset/recall ii bank, preset
/aeolus/control/all_notes_off
/aeolus/control/general_cancel
/aeolus/control/cancel i group
/aeolus/control/save

View Events (To Aeolus)
/aeolus/view/register si host,port
        will send description messages after successful registration
/aeolus/view/deregister si host,port
/aeolus/view/describe
        send the description messages again
/aeolus/view/ping

View Events (From Aeolus)
/aeolus/view/knob/push ii group, knob
/aeolus/view/knob/pull ii group, knob
        sent for each knob as appropriate when described and on updates
/aeolus/view/knob/describe iiss group, knob, type, name
    type in {stop,coupler,tremulant}
    sent for each knob when described
/aeolus/view/pong

## The Launchpad UI
Use the "functional UI" approach a la Elm and [Raj](https://jew.ski/raj/). 

dispatch(message)
  (state, effect) := update(state, message)
  effect(dispatch)
  view(state, dispatch)

The state/model is the state of the launchpad, (subset of) commands send control events, view updates the launchpad lights.
incoming osc view messages are dispatched, as are button press/release events